// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/v4/account_service.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	common "github.com/kinecosystem/agora-api/genproto/common/v4"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = common.Commitment(0)

	_ = common.Commitment(0)
)

// define the regex for a UUID once up-front
var _account_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AccountInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccountInfo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccountId() == nil {
		return AccountInfoValidationError{
			field:  "AccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountInfoValidationError{
				field:  "AccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Balance

	if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountInfoValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCloseAuthority()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountInfoValidationError{
				field:  "CloseAuthority",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AccountInfoValidationError is the validation error returned by
// AccountInfo.Validate if the designated constraints aren't met.
type AccountInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountInfoValidationError) ErrorName() string { return "AccountInfoValidationError" }

// Error satisfies the builtin error interface
func (e AccountInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountInfoValidationError{}

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTransaction() == nil {
		return CreateAccountRequestValidationError{
			field:  "Transaction",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountRequestValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Commitment

	return nil
}

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetAccountInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountResponseValidationError{
				field:  "AccountInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on GetAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccountId() == nil {
		return GetAccountInfoRequestValidationError{
			field:  "AccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountInfoRequestValidationError{
				field:  "AccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Commitment

	return nil
}

// GetAccountInfoRequestValidationError is the validation error returned by
// GetAccountInfoRequest.Validate if the designated constraints aren't met.
type GetAccountInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoRequestValidationError) ErrorName() string {
	return "GetAccountInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoRequestValidationError{}

// Validate checks the field values on GetAccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if v, ok := interface{}(m.GetAccountInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountInfoResponseValidationError{
				field:  "AccountInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAccountInfoResponseValidationError is the validation error returned by
// GetAccountInfoResponse.Validate if the designated constraints aren't met.
type GetAccountInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoResponseValidationError) ErrorName() string {
	return "GetAccountInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoResponseValidationError{}

// Validate checks the field values on ResolveTokenAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResolveTokenAccountsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccountId() == nil {
		return ResolveTokenAccountsRequestValidationError{
			field:  "AccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResolveTokenAccountsRequestValidationError{
				field:  "AccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeAccountInfo

	return nil
}

// ResolveTokenAccountsRequestValidationError is the validation error returned
// by ResolveTokenAccountsRequest.Validate if the designated constraints
// aren't met.
type ResolveTokenAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveTokenAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveTokenAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveTokenAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveTokenAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveTokenAccountsRequestValidationError) ErrorName() string {
	return "ResolveTokenAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveTokenAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveTokenAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveTokenAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveTokenAccountsRequestValidationError{}

// Validate checks the field values on ResolveTokenAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResolveTokenAccountsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTokenAccounts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResolveTokenAccountsResponseValidationError{
					field:  fmt.Sprintf("TokenAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTokenAccountInfos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResolveTokenAccountsResponseValidationError{
					field:  fmt.Sprintf("TokenAccountInfos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ResolveTokenAccountsResponseValidationError is the validation error returned
// by ResolveTokenAccountsResponse.Validate if the designated constraints
// aren't met.
type ResolveTokenAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveTokenAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveTokenAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveTokenAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveTokenAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveTokenAccountsResponseValidationError) ErrorName() string {
	return "ResolveTokenAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveTokenAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveTokenAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveTokenAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveTokenAccountsResponseValidationError{}

// Validate checks the field values on GetEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccountId() == nil {
		return GetEventsRequestValidationError{
			field:  "AccountId",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccountId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventsRequestValidationError{
				field:  "AccountId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetEventsRequestValidationError is the validation error returned by
// GetEventsRequest.Validate if the designated constraints aren't met.
type GetEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventsRequestValidationError) ErrorName() string { return "GetEventsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventsRequestValidationError{}

// Validate checks the field values on Events with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Events) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	if len(m.GetEvents()) > 128 {
		return EventsValidationError{
			field:  "Events",
			reason: "value must contain no more than 128 item(s)",
		}
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventsValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventsValidationError is the validation error returned by Events.Validate if
// the designated constraints aren't met.
type EventsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventsValidationError) ErrorName() string { return "EventsValidationError" }

// Error satisfies the builtin error interface
func (e EventsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvents.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventsValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Event_AccountUpdateEvent:

		if v, ok := interface{}(m.GetAccountUpdateEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "AccountUpdateEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Event_TransactionEvent:

		if v, ok := interface{}(m.GetTransactionEvent()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "TransactionEvent",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on AccountUpdateEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccountUpdateEvent) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAccountInfo() == nil {
		return AccountUpdateEventValidationError{
			field:  "AccountInfo",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAccountInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AccountUpdateEventValidationError{
				field:  "AccountInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AccountUpdateEventValidationError is the validation error returned by
// AccountUpdateEvent.Validate if the designated constraints aren't met.
type AccountUpdateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUpdateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUpdateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUpdateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUpdateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUpdateEventValidationError) ErrorName() string {
	return "AccountUpdateEventValidationError"
}

// Error satisfies the builtin error interface
func (e AccountUpdateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUpdateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUpdateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUpdateEventValidationError{}

// Validate checks the field values on TransactionEvent with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TransactionEvent) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTransaction() == nil {
		return TransactionEventValidationError{
			field:  "Transaction",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionEventValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTransactionError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionEventValidationError{
				field:  "TransactionError",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TransactionEventValidationError is the validation error returned by
// TransactionEvent.Validate if the designated constraints aren't met.
type TransactionEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionEventValidationError) ErrorName() string { return "TransactionEventValidationError" }

// Error satisfies the builtin error interface
func (e TransactionEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionEventValidationError{}
