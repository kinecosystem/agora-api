# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from airdrop.v4 import airdrop_service_pb2 as airdrop_dot_v4_dot_airdrop__service__pb2


class AirdropStub(object):
    """Airdrop service sends Kin to accounts for free. It is only available on development networks.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestAirdrop = channel.unary_unary(
                '/kin.agora.airdrop.v4.Airdrop/RequestAirdrop',
                request_serializer=airdrop_dot_v4_dot_airdrop__service__pb2.RequestAirdropRequest.SerializeToString,
                response_deserializer=airdrop_dot_v4_dot_airdrop__service__pb2.RequestAirdropResponse.FromString,
                )


class AirdropServicer(object):
    """Airdrop service sends Kin to accounts for free. It is only available on development networks.
    """

    def RequestAirdrop(self, request, context):
        """RequestAirdrop requests an air drop of kin to the target account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AirdropServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestAirdrop': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestAirdrop,
                    request_deserializer=airdrop_dot_v4_dot_airdrop__service__pb2.RequestAirdropRequest.FromString,
                    response_serializer=airdrop_dot_v4_dot_airdrop__service__pb2.RequestAirdropResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'kin.agora.airdrop.v4.Airdrop', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Airdrop(object):
    """Airdrop service sends Kin to accounts for free. It is only available on development networks.
    """

    @staticmethod
    def RequestAirdrop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/kin.agora.airdrop.v4.Airdrop/RequestAirdrop',
            airdrop_dot_v4_dot_airdrop__service__pb2.RequestAirdropRequest.SerializeToString,
            airdrop_dot_v4_dot_airdrop__service__pb2.RequestAirdropResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
