apply plugin: "java"
apply plugin: "com.google.protobuf"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

version = '0.27.0'
group = 'org.kin.agora.gen'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

// We want to strip proto validation because it doesn't support protobuf-lite atm
// which we want for mobile usage to reduce dependencies and size
task removeProtoValidation(type: Exec) {
    workingDir "${projectDir}"
    commandLine './remove_proto_validation.sh'
}

tasks.whenTaskAdded { task ->
    if (task.name == 'extractIncludeProto') {
        task.dependsOn removeProtoValidation
    }
}

def grpcVersion = "1.33.1"
def protocVersion = "3.12.0"
dependencies {
    implementation "io.grpc:grpc-protobuf-lite:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
}

def generatedSrcRoot = file("${buildDir}/generated/source/proto/main/java/")
sourceSets.main {
    proto {
        srcDir "${rootDir}/../../proto"
    }
    java {
        srcDirs = ["${generatedSrcRoot}"]
    }
}

compileJava {
    options.annotationProcessorGeneratedSourcesDirectory generatedSrcRoot
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
        all()*.plugins {
            grpc {
                option 'lite'
            }
        }
    }
}

jar {
    manifest {
        attributes('agora-api': project.name,
                'Version': project.version)
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from project.components.java
            artifact sourcesJar

            pom.withXml {
                def depNode
                def depNodes = asNode().get('dependencies')
                if (depNodes.size() == 0) {
                    depNode = asNode().appendNode('dependencies')
                } else {
                    depNode = depNodes.get(0)
                }

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = depNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? bintrayUser : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayKey') ? bintrayKey : System.getenv('BINTRAY_API_KEY')

    publications = ['mavenJava']

    pkg {
        repo = 'agora-api'
        name = 'agora-api'
        userOrg = 'kinecosystem'
        licenses = ['MIT']
        websiteUrl = "https://github.com/kinecosystem/agora-api"
        issueTrackerUrl = "https://github.com/kinecosystem/agora-api/issues"
        vcsUrl = 'https://github.com/kinecosystem/agora-api.git'
        publish = true
        version {
            name = this.version
            vcsTag = String.format('v%s', version)
        }
    }
}
